import { useState,useEffect } from "react";
import {useNavigate} from 'react-router-dom';
import {
    Table,
    TableBody,
    TableCaption,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
  } from "@/components/ui/table"
import { 
    Card, 
    CardContent, 
    CardDescription, 
    CardFooter, 
    CardHeader, 
    CardTitle 
  } from "@/components/ui/card";
import { 
    Dialog,
    DialogContent,
    DialogDescription,
    DialogFooter,
    DialogHeader,
    DialogTitle,
    DialogTrigger,
  } from "@/components/ui/dialog";
import {
    AlertDialog,
    AlertDialogAction,
    AlertDialogCancel,
    AlertDialogContent,
    AlertDialogDescription,
    AlertDialogFooter,
    AlertDialogHeader,
    AlertDialogTitle,
  } from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { 
    Shield, 
    AlertTriangle, 
    Info, 
    Trash2, 
    CheckCircle, 
    AlertCircle, 
    FileWarning, 
    Search,
    HardDrive,
    RefreshCw,
    ShieldAlert,
    Link2,
    Layers
} from "lucide-react";
import malwareRecommendations from "@/util/malware_recommendation.json";


interface ScanResult {
    id: number;
    scan_type : string;
    scan_result : string;
    upload_at : string;
}

interface MalwareItem {
    file: string;
    malware: string;
    hash: string;
    size: number;
    scanId: number;
    scanDate: string;
    scanType: string;
    signatureDetails?: {
      name: string;
      severity: string;
      description: string;
      recommendation: string;
      impact: string;
      preventionTips: string[];
    }
}

function MalwarePage() {
    const [scanResults, setScanResults] = useState<ScanResult[]>([]);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState("");
    const [malwareList, setMalwareList] = useState<MalwareItem[]>([]);
    const [searchTerm, setSearchTerm] = useState("");
    const [severityFilter, setSeverityFilter] = useState<string | null>(null);
    const [selectedMalware, setSelectedMalware] = useState<MalwareItem | null>(null);
    const [resolveDialogOpen, setResolveDialogOpen] = useState(false);
    const navigate = useNavigate();
  
    const getUserScanResults = async () => {
      try {
        setLoading(true);
        const token = localStorage.getItem("authToken");
        const response = await fetch(`http://localhost:5000/scan/result`, {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          }
        });
        const data = await response.json();
        if (data.success) {
          console.log(data.results);
          setScanResults(data.results);
          processMalwareFromScans(data.results);
        } else {
          setError(data.message || "Failed to fetch scan results");
        }
      } catch (error) {
        setError("An error occurred while fetching scan results");
        console.error(error);
      } finally {
        setLoading(false);
      }
    };
  
    useEffect(() => {
      getUserScanResults();
    }, []);
  
    const processMalwareFromScans = (scans: ScanResult[]) => {
      const allMalware: MalwareItem[] = [];
  
      scans.forEach(scan => {
        try {
          // Parse the scan_result JSON if it's a string
          const resultData = typeof scan.scan_result === 'string'
            ? JSON.parse(scan.scan_result)
            : scan.scan_result;
          
          let infectedFiles: any[] = [];
          
          if (scan.scan_type === 'directory' && resultData.directory_scan?.infected_files) {
            infectedFiles = resultData.directory_scan.infected_files;
          } else if (scan.scan_type === 'quick' && resultData.quick_scan?.infected_files) {
            infectedFiles = resultData.quick_scan.infected_files;
          } else if (scan.scan_type === 'full' && resultData.full_scan?.infected_files) {
            infectedFiles = resultData.full_scan.infected_files;
          }
          
          infectedFiles.forEach(file => {
            const signatureDetails = malwareRecommendations[file.hash as keyof typeof malwareRecommendations];
            
            allMalware.push({
              file: file.file,
              malware: file.malware,
              hash: file.hash,
              size: file.size,
              scanId: scan.id,
              scanDate: scan.upload_at,
              scanType: scan.scan_type,
              signatureDetails: signatureDetails
            });
          });
        } catch (err) {
          console.error("Error processing scan result:", err);
        }
      });
      
      setMalwareList(allMalware);
    };
  
    // Get severity badge color
    const getSeverityColor = (severity: string) => {
      switch (severity?.toLowerCase()) {
        case "critical": return "bg-red-100 text-red-800 border-red-300";
        case "high": return "bg-orange-100 text-orange-800 border-orange-300";
        case "medium": return "bg-amber-100 text-amber-800 border-amber-300";
        case "low": return "bg-blue-100 text-blue-800 border-blue-300";
        default: return "bg-gray-100 text-gray-800 border-gray-300";
      }
    };
  
    const getSeverityIcon = (severity: string) => {
      switch (severity?.toLowerCase()) {
        case "critical": return <AlertCircle className="h-4 w-4 text-red-600" />;
        case "high": return <AlertTriangle className="h-4 w-4 text-orange-600" />;
        case "medium": return <Info className="h-4 w-4 text-amber-600" />;
        case "low": return <Info className="h-4 w-4 text-blue-600" />;
        default: return <Info className="h-4 w-4 text-gray-600" />;
      }
    };
  
    // Filter and search malware list
    const filteredMalware = malwareList.filter(item => {
      const matchesSearch = searchTerm === "" || 
        item.file.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.malware.toLowerCase().includes(searchTerm.toLowerCase());
      
      const matchesSeverity = !severityFilter || 
        (item.signatureDetails?.severity.toLowerCase() === severityFilter.toLowerCase());
      
      return matchesSearch && matchesSeverity;
    });
  
    const handleFileAction = (action: string, file: string) => {
      // For demo purposes - in a real app this would call backend API
      console.log(`${action} file: ${file}`);
      setResolveDialogOpen(false);
      
      // Show success message (in a real app you would handle this with proper state)
      alert(`${action} action initiated for ${file}. In a real application, this would call your backend API.`);
    };
  
    const getFileNameFromPath = (path: string) => {
      return path.split('\\').pop() || path;
    };
  
    const formatDate = (dateString: string) => {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'short', 
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      });
    };
  
    return (
      <div className="space-y-6">
        {/* Page Header */}
        <div className="flex flex-col space-y-2 md:flex-row md:justify-between md:space-y-0">
          <div>
            <h2 className="text-2xl font-bold tracking-tight">Malware Management</h2>
            <p className="text-muted-foreground">
              Detected threats and recommended actions for your system
            </p>
          </div>
          <div className="flex items-center gap-2">
            <Button 
              variant="outline" 
              onClick={() => setSeverityFilter(null)}
              size="sm"
            >
              <RefreshCw className="h-4 w-4 mr-1" />
              Reset Filters
            </Button>
          </div>
        </div>
  
        {/* Stats Cards */}
        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4">
          <Card>
            <CardContent className="p-4 flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Total Threats</p>
                <p className="text-2xl font-bold">{malwareList.length}</p>
              </div>
              <FileWarning className="h-8 w-8 text-amber-500" />
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4 flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Critical Threats</p>
                <p className="text-2xl font-bold">
                  {malwareList.filter(m => m.signatureDetails?.severity === "critical").length}
                </p>
              </div>
              <AlertCircle className="h-8 w-8 text-red-500" />
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4 flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">High Severity</p>
                <p className="text-2xl font-bold">
                  {malwareList.filter(m => m.signatureDetails?.severity === "high").length}
                </p>
              </div>
              <AlertTriangle className="h-8 w-8 text-orange-500" />
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4 flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Resolved</p>
                <p className="text-2xl font-bold">0</p>
              </div>
              <CheckCircle className="h-8 w-8 text-green-500" />
            </CardContent>
          </Card>
        </div>
  
        {/* Search and Filter Bar */}
        <Card>
          <CardContent className="p-4">
            <div className="flex flex-col md:flex-row gap-3">
              <div className="relative flex-grow">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search for malware or files..."
                  className="pl-8"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>
              <div className="flex gap-2">
                <Button 
                  variant={severityFilter === "critical" ? "default" : "outline"}
                  className={severityFilter === "critical" ? "bg-red-600" : ""}
                  onClick={() => setSeverityFilter(severityFilter === "critical" ? null : "critical")}
                >
                  Critical
                </Button>
                <Button 
                  variant={severityFilter === "high" ? "default" : "outline"} 
                  className={severityFilter === "high" ? "bg-orange-600" : ""}
                  onClick={() => setSeverityFilter(severityFilter === "high" ? null : "high")}
                >
                  High
                </Button>
                <Button 
                  variant={severityFilter === "medium" ? "default" : "outline"}
                  className={severityFilter === "medium" ? "bg-amber-600" : ""}
                  onClick={() => setSeverityFilter(severityFilter === "medium" ? null : "medium")}
                >
                  Medium
                </Button>
                <Button 
                  variant={severityFilter === "low" ? "default" : "outline"}
                  className={severityFilter === "low" ? "bg-blue-600" : ""}
                  onClick={() => setSeverityFilter(severityFilter === "low" ? null : "low")}
                >
                  Low
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
  
        {/* Malware Table */}
        <Card>
          <CardHeader className="pb-1">
            <CardTitle>Detected Malware</CardTitle>
            <CardDescription>
              {loading ? "Loading malware data..." : `Showing ${filteredMalware.length} of ${malwareList.length} detected threats`}
            </CardDescription>
          </CardHeader>
          <CardContent>
            {loading ? (
              <div className="py-10 text-center">
                <RefreshCw className="h-8 w-8 animate-spin mx-auto text-muted-foreground" />
                <p className="mt-4 text-muted-foreground">Loading malware data...</p>
              </div>
            ) : error ? (
              <div className="py-10 text-center">
                <AlertCircle className="h-8 w-8 mx-auto text-red-500" />
                <p className="mt-4 text-red-500">{error}</p>
              </div>
            ) : filteredMalware.length === 0 ? (
              <div className="py-10 text-center">
                <Shield className="h-8 w-8 mx-auto text-green-500" />
                <p className="mt-4">No malware found matching your filters.</p>
              </div>
            ) : (
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Severity</TableHead>
                      <TableHead>Type</TableHead>
                      <TableHead>File</TableHead>
                      <TableHead>Detected On</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredMalware.map((item, index) => (
                      <TableRow key={`${item.hash}-${index}`}>
                        <TableCell>
                          <Badge 
                            variant="outline" 
                            className={`${getSeverityColor(item.signatureDetails?.severity || "medium")} flex items-center gap-1`}
                          >
                            {getSeverityIcon(item.signatureDetails?.severity || "medium")}
                            {item.signatureDetails?.severity || "Medium"}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <div className="font-medium">
                            {item.signatureDetails?.name || item.malware}
                          </div>
                        </TableCell>
                        <TableCell className="max-w-[250px] truncate">
                          <div className="flex items-center gap-1">
                            <Layers className="h-4 w-4 text-muted-foreground" />
                            <span className="truncate" title={item.file}>
                              {getFileNameFromPath(item.file)}
                            </span>
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="text-sm text-muted-foreground">
                            {formatDate(item.scanDate)}
                          </div>
                          <div className="text-xs capitalize">
                            {item.scanType} Scan
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="flex gap-2">
                            <Dialog>
                              <DialogTrigger asChild>
                                <Button 
                                  variant="outline" 
                                  size="sm" 
                                  onClick={() => setSelectedMalware(item)}
                                >
                                  <Info className="h-4 w-4 mr-1" />
                                  Details
                                </Button>
                              </DialogTrigger>
                              <DialogContent className="max-w-lg">
                                <DialogHeader>
                                  <DialogTitle className="flex items-center gap-2">
                                    <AlertTriangle className={`h-5 w-5 ${item.signatureDetails?.severity === 'critical' ? 'text-red-500' : item.signatureDetails?.severity === 'high' ? 'text-orange-500' : 'text-amber-500'}`} />
                                    {item.signatureDetails?.name || item.malware}
                                  </DialogTitle>
                                  <DialogDescription>
                                    <Badge 
                                      variant="outline" 
                                      className={`${getSeverityColor(item.signatureDetails?.severity || "medium")} mt-2`}
                                    >
                                      {item.signatureDetails?.severity || "Medium"} Severity
                                    </Badge>
                                  </DialogDescription>
                                </DialogHeader>
                                
                                <div className="space-y-4 my-2">
                                  <div>
                                    <h4 className="text-sm font-medium">Description</h4>
                                    <p className="text-sm text-muted-foreground mt-1">
                                      {item.signatureDetails?.description || "No description available."}
                                    </p>
                                  </div>
                                  
                                  <div>
                                    <h4 className="text-sm font-medium">Impact</h4>
                                    <p className="text-sm text-muted-foreground mt-1">
                                      {item.signatureDetails?.impact || "Impact information not available."}
                                    </p>
                                  </div>
                                  
                                  <div>
                                    <h4 className="text-sm font-medium">File Details</h4>
                                    <div className="text-sm text-muted-foreground mt-1 bg-muted p-2 rounded">
                                      <p><span className="font-medium">Path:</span> {item.file}</p>
                                      <p><span className="font-medium">Hash:</span> {item.hash}</p>
                                      <p><span className="font-medium">Size:</span> {item.size} bytes</p>
                                      <p><span className="font-medium">Detected:</span> {formatDate(item.scanDate)}</p>
                                    </div>
                                  </div>
                                </div>
                                
                                <DialogFooter>
                                  <Button 
                                    variant="outline" 
                                    onClick={() => setResolveDialogOpen(true)}
                                  >
                                    Resolve Threat
                                  </Button>
                                </DialogFooter>
                              </DialogContent>
                            </Dialog>
                            
                            <AlertDialog open={resolveDialogOpen} onOpenChange={setResolveDialogOpen}>
                              <AlertDialogContent>
                                <AlertDialogHeader>
                                  <AlertDialogTitle>Resolve Malware Threat</AlertDialogTitle>
                                  <AlertDialogDescription>
                                    {selectedMalware?.signatureDetails?.recommendation || "Remove this file to protect your system."}
                                  </AlertDialogDescription>
                                </AlertDialogHeader>
                                <div className="space-y-4 my-4">
                                <h3 className="text-sm font-medium">Prevention Tips:</h3>
                                <ul className="space-y-2">
                                  {selectedMalware?.signatureDetails?.preventionTips?.map((tip, index) => (
                                    <li key={index} className="flex items-start gap-2">
                                      <CheckCircle className="h-4 w-4 text-green-500 mt-0.5" />
                                      <span className="text-sm">{tip}</span>
                                    </li>
                                  ))}
                                </ul>
                              </div>
                              <AlertDialogFooter>
                                <AlertDialogCancel>Cancel</AlertDialogCancel>
                                <AlertDialogAction
                                  className="bg-red-600 hover:bg-red-700"
                                  onClick={() => handleFileAction("Remove", selectedMalware?.file || "")}
                                >
                                  <Trash2 className="h-4 w-4 mr-2" />
                                  Remove Threat
                                </AlertDialogAction>
                              </AlertDialogFooter>
                            </AlertDialogContent>
                          </AlertDialog>

                          <Button 
                            variant="destructive" 
                            size="sm"
                            onClick={() => {
                              setSelectedMalware(item);
                              setResolveDialogOpen(true);
                            }}
                          >
                            <Trash2 className="h-4 w-4 mr-1" />
                            Remove
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </CardContent>
        <CardFooter className="flex justify-between">
          <Button variant="outline" onClick={() => navigate("/dashboard")}>
            Back to Dashboard
          </Button>
          <Button onClick={() => getUserScanResults()}>
            <RefreshCw className="h-4 w-4 mr-2" />
            Refresh Results
          </Button>
        </CardFooter>
      </Card>

      {/* Recommendations Card */}
      <Card>
        <CardHeader>
          <CardTitle>Security Recommendations</CardTitle>
          <CardDescription>
            Steps you can take to improve your system's security and prevent malware infections
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-start gap-3 p-4 bg-blue-50 rounded-md border border-blue-200">
              <Shield className="h-5 w-5 text-blue-600 mt-0.5" />
              <div>
                <h4 className="font-medium text-blue-800">Keep Software Updated</h4>
                <p className="text-sm text-blue-700 mt-1">
                  Regularly update your operating system, antivirus, and all applications to 
                  protect against new vulnerabilities.
                </p>
              </div>
            </div>
            
            <div className="flex items-start gap-3 p-4 bg-green-50 rounded-md border border-green-200">
              <Link2 className="h-5 w-5 text-green-600 mt-0.5" />
              <div>
                <h4 className="font-medium text-green-800">Be Careful with Attachments</h4>
                <p className="text-sm text-green-700 mt-1">
                  Never open email attachments or click on links from unknown or suspicious sources, 
                  even if they look legitimate.
                </p>
              </div>
            </div>
            
            <div className="flex items-start gap-3 p-4 bg-purple-50 rounded-md border border-purple-200">
              <ShieldAlert className="h-5 w-5 text-purple-600 mt-0.5" />
              <div>
                <h4 className="font-medium text-purple-800">Use Strong Passwords</h4>
                <p className="text-sm text-purple-700 mt-1">
                  Create unique, complex passwords for all your accounts and consider using a password manager 
                  to keep track of them securely.
                </p>
              </div>
            </div>
            
            <div className="flex items-start gap-3 p-4 bg-amber-50 rounded-md border border-amber-200">
              <HardDrive className="h-5 w-5 text-amber-600 mt-0.5" />
              <div>
                <h4 className="font-medium text-amber-800">Backup Your Data</h4>
                <p className="text-sm text-amber-700 mt-1">
                  Regularly backup important files to an external drive or cloud storage to protect 
                  against ransomware and data loss.
                </p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

export default MalwarePage;
